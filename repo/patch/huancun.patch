diff --git a/src/main/scala/huancun/BaseMSHR.scala b/src/main/scala/huancun/BaseMSHR.scala
index a27df19..ee6fb5b 100644
--- a/src/main/scala/huancun/BaseMSHR.scala
+++ b/src/main/scala/huancun/BaseMSHR.scala
@@ -28,6 +28,7 @@ class MSHRResps(implicit p: Parameters) extends HuanCunBundle {
   val sink_c = ValidIO(new SinkCResp)
   val sink_d = ValidIO(new SinkDResp)
   val sink_e = ValidIO(new SinkEResp)
+  val source_d = ValidIO(new SourceDResp)
 }
 
 class NestedWriteback(implicit p: Parameters) extends HuanCunBundle {
diff --git a/src/main/scala/huancun/Common.scala b/src/main/scala/huancun/Common.scala
index db68bf8..c7c6bda 100644
--- a/src/main/scala/huancun/Common.scala
+++ b/src/main/scala/huancun/Common.scala
@@ -119,6 +119,10 @@ class SinkEResp(implicit p: Parameters) extends HuanCunBundle {
   val sink = UInt(mshrBits.W) // The slave sink id accepting this resp
 }
 
+class SourceDResp(implicit p: Parameters) extends HuanCunBundle {
+  val sink = UInt(mshrBits.W)
+}
+
 trait HasChannelBits { this: Bundle =>
   val channel = UInt(3.W)
   def fromA = channel(0).asBool
diff --git a/src/main/scala/huancun/HuanCun.scala b/src/main/scala/huancun/HuanCun.scala
index e24d637..ef68a76 100644
--- a/src/main/scala/huancun/HuanCun.scala
+++ b/src/main/scala/huancun/HuanCun.scala
@@ -304,7 +304,9 @@ class HuanCun(implicit p: Parameters) extends LazyModule with HasHuanCunParamete
       case (((in, edgeIn), (out, edgeOut)), i) =>
         require(in.params.dataBits == out.params.dataBits)
         val rst = if(cacheParams.level == 3 && !cacheParams.simulation) {
-          RegNext(RegNext(reset.asBool))
+          withReset (reset.asAsyncReset) {
+            RegNext(RegNext(reset.asBool, true.B), true.B)
+          }
         } else reset.asBool
         val slice = withReset(rst){ Module(new Slice()(p.alterPartial {
           case EdgeInKey  => edgeIn
diff --git a/src/main/scala/huancun/Slice.scala b/src/main/scala/huancun/Slice.scala
index 762aea4..5f699e6 100644
--- a/src/main/scala/huancun/Slice.scala
+++ b/src/main/scala/huancun/Slice.scala
@@ -518,9 +518,11 @@ class Slice()(implicit p: Parameters) extends HuanCunModule {
       mshr.io.resps.sink_c.valid := sinkC.io.resp.valid && sinkC.io.resp.bits.set === mshr.io.status.bits.set
       mshr.io.resps.sink_d.valid := sinkD.io.resp.valid && sinkD.io.resp.bits.source === i.U
       mshr.io.resps.sink_e.valid := sinkE.io.resp.valid && sinkE.io.resp.bits.sink === i.U
+      mshr.io.resps.source_d.valid := sourceD.io.resp.valid && sourceD.io.resp.bits.sink === i.U
       mshr.io.resps.sink_c.bits := sinkC.io.resp.bits
       mshr.io.resps.sink_d.bits := sinkD.io.resp.bits
       mshr.io.resps.sink_e.bits := sinkE.io.resp.bits
+      mshr.io.resps.source_d.bits := sourceD.io.resp.bits
   }
   c_mshr.io.resps.sink_c.valid := false.B
 
diff --git a/src/main/scala/huancun/SourceD.scala b/src/main/scala/huancun/SourceD.scala
index 81d36ce..f0f46db 100644
--- a/src/main/scala/huancun/SourceD.scala
+++ b/src/main/scala/huancun/SourceD.scala
@@ -52,6 +52,8 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
     // putbuffer interface
     val pb_pop = DecoupledIO(new PutBufferPop)
     val pb_beat = Input(new PutBufferBeatEntry)
+    // resp when merged putdata is written back
+    val resp = ValidIO(new SourceDResp)
   })
 
   val d = io.d
@@ -78,7 +80,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   val s1_counter = RegInit(0.U(beatBits.W)) // how many beats have been sent
   val s1_total_beats = Mux(s1_needData, totalBeats(s1_req.size), 0.U(beatBits.W))
   val s1_beat = startBeat(s1_req.off) | s1_counter
-  val s1_valid_r = (busy || (io.task.valid && io.task.bits.opcode =/= TLMessages.PutPartialData)) && s1_needData && !s1_block_r
+  val s1_valid_r = (busy || io.task.valid) && s1_needData && !s1_block_r
   val s1_last = s1_counter === s1_total_beats
   val s1_bypass_hit = io.bypass_read.valid && io.bypass_read.ready
   val s1_bypass_data = io.bypass_read.buffer_data
@@ -115,7 +117,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
     }
   }
   io.task.ready := !busy
-  s1_valid := (busy || (io.task.valid && io.task.bits.opcode =/= TLMessages.PutPartialData)) && (
+  s1_valid := (busy || io.task.valid) && (
     !s1_valid_r ||
       Mux(s1_req.useBypass,
         s1_bypass_hit,                    // wait data from refill buffer
@@ -143,10 +145,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   io.pb_pop.bits.count := s2_counter
   io.pb_pop.bits.last  := s2_last
 
-  val pbQueue = Module(new Queue(new PutBufferBeatEntry, beatSize, flow = false, pipe = false))
-  pbQueue.io.enq.bits := io.pb_beat
-  pbQueue.io.enq.valid := RegNext(io.pb_pop.fire(), false.B)
-  pbQueue.io.deq.ready := s3_valid
+  val pbQueue = Module(new Queue(new PutBufferBeatEntry, beatSize * sramLatency, flow = false, pipe = false))
 
   when (pb_ready) { s2_valid_pb := false.B }
   when (s2_latch) { s2_valid_pb := s1_need_pb }
@@ -173,6 +172,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   class PipeInfo extends Bundle {
     val counter = UInt(beatBits.W)
     val beat = UInt(beatBits.W)
+    val last = Bool()
     val needPb = Bool()
     val need_d = Bool()
     val isReleaseAck = Bool()
@@ -185,6 +185,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   pipe.io.in.valid := s2_valid
   pipe.io.in.bits.counter := s2_counter
   pipe.io.in.bits.beat := s2_beat
+  pipe.io.in.bits.last := s2_last
   pipe.io.in.bits.needPb := s2_need_pb
   pipe.io.in.bits.need_d := s2_need_d
   pipe.io.in.bits.isReleaseAck := s2_releaseAck
@@ -196,6 +197,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   val s3_req = s3_regs.req
   val s3_counter = s3_regs.counter
   val s3_beat = s3_regs.beat
+  val s3_last = s3_regs.last
   val s3_pbdata = pbQueue.io.deq.bits
   val s3_need_pb = s3_regs.needPb
   val s3_releaseAck = s3_regs.isReleaseAck
@@ -205,8 +207,12 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
 
   assert(!s3_valid || needData(s3_regs.req), "Only data task can go to stage3!")
 
+  pbQueue.io.enq.bits := io.pb_beat
+  pbQueue.io.enq.valid := RegNext(io.pb_pop.fire(), false.B)
+  pbQueue.io.deq.ready := s3_valid && s3_need_pb
+
   val s3_rdata = s3_queue.io.deq.bits.data
-  s3_d.valid := s3_valid && (!s3_need_pb || s3_counter === 0.U)
+  s3_d.valid := pipe.io.out.valid && (!s3_need_pb || (s4_ready && s3_counter === 0.U))
   s3_d.bits.opcode := s3_req.opcode
   s3_d.bits.param := Mux(s3_releaseAck, 0.U, s3_req.param)
   s3_d.bits.sink := s3_req.sinkId
@@ -214,7 +220,8 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   s3_d.bits.source := s3_req.sourceId
   s3_d.bits.denied := s3_req.denied
   s3_d.bits.data := s3_rdata
-  s3_d.bits.corrupt := s3_req.denied || s3_queue.io.deq.bits.corrupt
+  s3_d.bits.corrupt := s3_req.denied ||
+    (s3_req.opcode =/= TLMessages.AccessAck && s3_req.opcode =/= TLMessages.Grant && s3_queue.io.deq.bits.corrupt)
   s3_d.bits.echo.lift(DirtyKey).foreach(_ := s3_req.dirty)
 
   s3_queue.io.enq.valid := RegNextN(
@@ -224,21 +231,24 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   )
   s3_queue.io.enq.bits := io.bs_rdata
   assert(!s3_queue.io.enq.valid || s3_queue.io.enq.ready)
-  s3_queue.io.deq.ready := s3_d.ready && s3_valid
+  s3_queue.io.deq.ready := s3_valid
+
+  assert(!(pipe.io.out.valid &&              !s3_queue.io.deq.valid))
+  assert(!(pipe.io.out.valid && s3_need_pb && !pbQueue.io.deq.valid))
 
-  pipe.io.out.ready := !s3_valid || s3_d.ready
-  s3_valid := pipe.io.out.valid
+  pipe.io.out.ready := Mux(s3_need_pb, s4_ready && (s3_counter =/= 0.U || s3_d.ready), s3_d.ready)
+  s3_valid := pipe.io.out.fire
 
   // stage4
-  val s4_latch = s3_valid && s4_ready
+  val s4_latch = s3_valid && s4_ready && s3_need_pb
   val s4_req = RegEnable(s3_req, s4_latch)
   val s4_rdata = RegEnable(s3_rdata, s4_latch)
   val s4_pbdata = RegEnable(s3_pbdata, s4_latch)
-  val s4_need_pb = RegEnable(s3_need_pb, s4_latch)
   val s4_beat = RegEnable(s3_beat, s4_latch)
+  val s4_last = RegEnable(s3_last, s4_latch)
   val s4_full = RegInit(false.B)
 
-  when (io.bs_waddr.ready || !s4_need_pb) { s4_full := false.B }
+  when (io.bs_waddr.ready) { s4_full := false.B }
   when (s4_latch) { s4_full := true.B }
 
   val selects = s4_pbdata.mask.asBools
@@ -246,7 +256,7 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
     VecInit(Seq(s4_rdata, s4_pbdata.data).map(_((i + 1) * 8 - 1, i * 8)))(s)
   }.reverse)  // merge data according to mask
 
-  io.bs_waddr.valid := s4_full && s4_need_pb
+  io.bs_waddr.valid := s4_full
   io.bs_waddr.bits.noop := false.B
   io.bs_waddr.bits.way  := s4_req.way
   io.bs_waddr.bits.set  := s4_req.set
@@ -255,7 +265,10 @@ class SourceD(implicit p: Parameters) extends HuanCunModule {
   io.bs_wdata.data := mergedData
   io.bs_wdata.corrupt := false.B
 
-  s4_ready := !s4_full || io.bs_waddr.ready || !s4_need_pb
+  s4_ready := !s4_full || io.bs_waddr.ready
+
+  io.resp.valid := io.bs_waddr.fire && s4_last
+  io.resp.bits.sink := s4_req.sinkId
 
   TLArbiter.lowest(edgeIn, io.d, s3_d, s2_d)
 
diff --git a/src/main/scala/huancun/inclusive/MSHR.scala b/src/main/scala/huancun/inclusive/MSHR.scala
index ec30f9c..6a6e3ed 100644
--- a/src/main/scala/huancun/inclusive/MSHR.scala
+++ b/src/main/scala/huancun/inclusive/MSHR.scala
@@ -98,7 +98,7 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
     new_meta.state := probe_next_state
     new_meta.clients := Mux(req.param === toN, 0.U, meta.clients)
     // TODO: if a TIP/TRUNK is probed to be BRANCH, do we need to probe clients to INVALID?
-    new_meta.hit := false.B
+    new_meta.hit := req.param =/= toN
   }.otherwise {
     // Acquire / Intent / Put / Get / Atomics
     new_meta.dirty := meta.hit && meta.dirty || !req.opcode(2) // Put / Atomics
@@ -190,6 +190,7 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
   val w_grant = RegInit(true.B)
   val w_releaseack = RegInit(true.B)
   val w_grantack = RegInit(true.B)
+  val w_putwritten = RegInit(true.B)
 
   when(io.dirResult.valid) {
     // Default value
@@ -217,6 +218,7 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
     w_grant := true.B
     w_releaseack := true.B
     w_grantack := true.B
+    w_putwritten := true.B
 
     gotT := false.B
     probes_toN := 0.U
@@ -258,21 +260,33 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
         }
       }
     }.elsewhen(req.opcode(2,1) === 0.U) { // Put
+      s_execute := false.B
       // need pprobe
-      when(meta.hit && meta.state === TRUNK) {
-        s_pprobe := false.B
-        w_pprobeackfirst := false.B
-        w_pprobeacklast := false.B
-        w_pprobeack := false.B
-        s_writebackdir := false.B
-      }
-      // Put and Atomics need to write
-      when(meta.hit && meta.state === TIP) {
+      when (meta.hit) {
+        when (!meta_no_client) {
+          s_pprobe         := false.B
+          w_pprobeackfirst := false.B
+          w_pprobeacklast  := false.B
+          w_pprobeack      := false.B
+        }
+        when (meta.state === BRANCH) {
+          s_acquire        := false.B
+          w_grantfirst     := false.B
+          w_grantlast      := false.B
+          w_grant          := false.B
+          s_grantack       := false.B
+        }
         s_writebackdir := false.B
+        w_putwritten   := false.B
+
+        probes_toN := ~0.U(clientBits.W)
       }
       // need to transfer exactly the request to sourceA when Put miss
-      when(!meta.hit || meta.state === BRANCH) { // Put[Full/Partial]Data
+      .otherwise { // Put[Full/Partial]Data
         s_transferput := false.B
+        w_grantfirst  := false.B
+        w_grantlast   := false.B
+        w_grant       := false.B
       }
     }.otherwise {
       // A channel requests
@@ -357,7 +371,7 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
    *
    * Assume that in data array, sinkA > sinkC > sourceC > sinkD > sourceDw > sourceDr
    */
-  val no_wait = w_rprobeacklast && w_pprobeacklast && w_grantlast && w_releaseack && w_grantack
+  val no_wait = w_rprobeacklast && w_pprobeacklast && w_grantlast && w_releaseack && w_grantack && w_putwritten
   io.tasks.source_a.valid := (!s_acquire || !s_transferput) && s_release && s_pprobe
   io.tasks.source_b.valid := !s_rprobe || !s_pprobe
   io.tasks.source_c.valid := !s_release && w_rprobeackfirst || !s_probeack && w_pprobeackfirst
@@ -396,25 +410,28 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
   ob.param := Mux(!s_rprobe || cache_alias, toN, Mux(req.fromB, req.param, Mux(req_needT, toN, toB)))
   ob.clients := meta.clients & ~probe_exclude // TODO: Provides all clients needing probe
 
-  oc.opcode := Mux(req.fromB, Cat(ProbeAck(2,1), meta.dirty.asUInt), if (alwaysReleaseData) ReleaseData else Cat(Release(2, 1), meta.dirty.asUInt))
-  oc.tag := meta.tag
+  oc.opcode := Mux(req.fromB, Cat(ProbeAck(2,1), meta.hit && meta.dirty), if (alwaysReleaseData) ReleaseData else Cat(Release(2, 1), meta.dirty.asUInt))
+  oc.tag := Mux(req.fromB, req.tag, meta.tag)
   oc.set := req.set
   oc.param := Mux(
     req.fromB,
-    MuxLookup(
-      Cat(meta.state, probe_next_state),
-      NtoN,
-      Seq( // TODO: optimize this
-        Cat(TRUNK, TRUNK) -> TtoT,
-        Cat(TIP, TIP) -> TtoT,
-        Cat(TRUNK, BRANCH) -> TtoB,
-        Cat(TIP, BRANCH) -> TtoB,
-        Cat(TRUNK, INVALID) -> TtoN,
-        Cat(TIP, INVALID) -> TtoN,
-        Cat(BRANCH, BRANCH) -> BtoB,
-        Cat(BRANCH, INVALID) -> BtoN,
-        Cat(INVALID, INVALID) -> NtoN
-      )
+    Mux(meta.hit,
+      MuxLookup(
+        Cat(meta.state, probe_next_state),
+        NtoN,
+        Seq( // TODO: optimize this
+          Cat(TRUNK, TRUNK) -> TtoT,
+          Cat(TIP, TIP) -> TtoT,
+          Cat(TRUNK, BRANCH) -> TtoB,
+          Cat(TIP, BRANCH) -> TtoB,
+          Cat(TRUNK, INVALID) -> TtoN,
+          Cat(TIP, INVALID) -> TtoN,
+          Cat(BRANCH, BRANCH) -> BtoB,
+          Cat(BRANCH, INVALID) -> BtoN,
+          Cat(INVALID, INVALID) -> NtoN
+        )
+      ),
+      NtoN
     ),
     Mux(meta.state === BRANCH, BtoN, TtoN)
   )
@@ -449,7 +466,7 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
   od.dirty := false.B // TODO
   od.useBypass := false.B
   od.bufIdx := req.bufIdx
-  od.bypassPut := false.B
+  od.bypassPut := (req.opcode(2, 1) === 0.U) && !meta.hit
 
   oe.sink := sink
 
@@ -567,10 +584,19 @@ class MSHR()(implicit p: Parameters) extends BaseMSHR[DirResult, DirWrite, TagWr
     when(io.resps.sink_d.bits.opcode === ReleaseAck) {
       w_releaseack := true.B
     }
+    // for transferput
+    when (io.resps.sink_d.bits.opcode === AccessAck) {
+      w_grantfirst := true.B
+      w_grantlast  := io.resps.sink_d.bits.last
+      w_grant      := io.resps.sink_d.bits.last
+    }
   }
   when(io.resps.sink_e.valid) {
     w_grantack := true.B
   }
+  when(io.resps.source_d.valid) {
+    w_putwritten := true.B
+  }
 
   // Release MSHR
   val no_schedule = s_execute && s_probeack && meta_valid && s_writebacktag && s_writebackdir && s_writerelease &&
diff --git a/src/main/scala/huancun/utils/ChiselDB.scala b/src/main/scala/huancun/utils/ChiselDB.scala
index 83c2b4e..a5585d9 100644
--- a/src/main/scala/huancun/utils/ChiselDB.scala
+++ b/src/main/scala/huancun/utils/ChiselDB.scala
@@ -65,7 +65,7 @@ class Table[T <: Record](val tableName: String, val hw: T) extends HasTableUtils
       s"""
          |void init_db_$tableName() {
          |  // create table
-         |  char * sql = "CREATE TABLE $tableName(" \\
+         |  const char * sql = "CREATE TABLE $tableName(" \\
          |    "ID INTEGER PRIMARY KEY AUTOINCREMENT," \\
          |    ${cols.map(c => "\"" + c.toUpperCase + " INT NOT NULL,\" \\").mkString("", "\n    ", "")}
          |    "STAMP INT NOT NULL," \\
@@ -87,8 +87,8 @@ class Table[T <: Record](val tableName: String, val hw: T) extends HasTableUtils
          |  char * site
          |) {
          |  if(!dump) return;
-         |  char * format = "INSERT INTO $tableName(${cols.map(_.toUpperCase).mkString(",")}, STAMP, SITE) " \\
-         |                  "VALUES(${cols.map(_ => "%ld").mkString(", ")}, %ld, '%s');";
+         |  const char * format = "INSERT INTO $tableName(${cols.map(_.toUpperCase).mkString(",")}, STAMP, SITE) " \\
+         |                        "VALUES(${cols.map(_ => "%ld").mkString(", ")}, %ld, '%s');";
          |  char * sql = (char *)malloc(${cols.size + 1} * sizeof(uint64_t) + (strlen(format)+strlen(site)) * sizeof(char));
          |  sprintf(sql,
          |    format,
@@ -212,8 +212,10 @@ object ChiselDB {
       |#include <unistd.h>
       |#include <sqlite3.h>
       |
+      |extern "C" {
       |void init_db(bool en);
       |void save_db(const char * filename);
+      |}
       |
       |#endif
       |""".stripMargin
diff --git a/src/main/scala/huancun/utils/SRAMTemplate.scala b/src/main/scala/huancun/utils/SRAMTemplate.scala
index 3dbd098..51edab2 100644
--- a/src/main/scala/huancun/utils/SRAMTemplate.scala
+++ b/src/main/scala/huancun/utils/SRAMTemplate.scala
@@ -22,6 +22,7 @@ package huancun.utils
 
 import chisel3._
 import chisel3.util._
+import chisel3.experimental._
 import freechips.rocketchip.tilelink.LFSR64
 
 object HoldUnless {
@@ -97,6 +98,81 @@ class SRAMWriteBus[T <: Data](private val gen: T, val set: Int, val way: Int = 1
   }
 }
 
+class SPSRAM(a: Int, d: Int, s: Int) extends ExtModule(Map("A" -> a,
+                                                           "D" -> d,
+                                                           "S" -> s)) {
+  override def desiredName = s"SPSRAM___${a}_${d}_${s}"
+
+  val clk   = IO(Input (Clock()))
+
+  val en    = IO(Input (Bool()))
+  val rnw   = IO(Input (Bool()))
+  val addr  = IO(Input (UInt(a.W)))
+
+  val rdata = IO(Output(UInt(d.W)))
+  val wdata = IO(Input (UInt(d.W)))
+  val wstrb = IO(Input (UInt(s.W)))
+}
+
+class DPSRAM(a: Int, d: Int, s: Int) extends ExtModule(Map("A" -> a,
+                                                           "D" -> d,
+                                                           "S" -> s)) {
+  override def desiredName = s"DPSRAM___${a}_${d}_${s}"
+
+  val clk   = IO(Input (Clock()))
+
+  val ren   = IO(Input (Bool()))
+  val raddr = IO(Input (UInt(a.W)))
+  val rdata = IO(Output(UInt(d.W)))
+
+  val wen   = IO(Input (Bool()))
+  val waddr = IO(Input (UInt(a.W)))
+  val wdata = IO(Input (UInt(d.W)))
+  val wstrb = IO(Input (UInt(s.W)))
+}
+
+object InstantiateSRAM {
+  def apply(sp:  Boolean,
+            aw:  Int,
+            dw:  Int,
+            way: Int,
+            clk: Clock,
+            ren: Bool, raddr: UInt, rdata: Vec[UInt],
+            wen: Bool, waddr: UInt, wdata: Vec[UInt], wstrb: UInt): Unit = {
+
+    if (dw > 0) {
+      if (sp) {
+        val sram = Module(new SPSRAM(aw, dw, way))
+
+        sram.clk   := clk
+        sram.en    := ren || wen
+        sram.rnw   := ren
+        sram.addr  := Mux(wen, waddr, raddr)
+        sram.wdata := wdata.asUInt
+        sram.wstrb := wstrb
+
+        rdata := sram.rdata.asTypeOf(rdata)
+
+      } else {
+        val sram = Module(new DPSRAM(aw, dw, way))
+
+        sram.clk   := clk
+        sram.ren   := ren
+        sram.raddr := raddr
+        sram.wen   := wen
+        sram.waddr := waddr
+        sram.wdata := wdata.asUInt
+        sram.wstrb := wstrb
+
+        rdata := sram.rdata.asTypeOf(rdata)
+      }
+
+    } else {
+      rdata := 0.U.asTypeOf(rdata)
+    }
+  }
+}
+
 class SRAMTemplate[T <: Data]
 (
   gen: T, set: Int, way: Int = 1,
@@ -110,7 +186,6 @@ class SRAMTemplate[T <: Data]
   })
 
   val wordType = UInt(gen.getWidth.W)
-  val array = SyncReadMem(set, Vec(way, wordType))
   val (resetState, resetSet) = (WireInit(false.B), WireInit(0.U))
 
   if (shouldReset) {
@@ -128,9 +203,20 @@ class SRAMTemplate[T <: Data]
   val setIdx = Mux(resetState, resetSet, io.w.req.bits.setIdx)
   val wdata = VecInit(Mux(resetState, 0.U.asTypeOf(Vec(way, gen)), io.w.req.bits.data).map(_.asTypeOf(wordType)))
   val waymask = Mux(resetState, Fill(way, "b1".U), io.w.req.bits.waymask.getOrElse("b1".U))
-  when (wen) { array.write(setIdx, wdata, waymask.asBools) }
+  val raw_rdata = Wire(Vec(way, wordType))
 
-  val raw_rdata = array.read(io.r.req.bits.setIdx, realRen)
+  InstantiateSRAM(singlePort,
+                  log2Ceil(set),
+                  way * gen.getWidth,
+                  way,
+                  clock,
+                  realRen,
+                  io.r.req.bits.setIdx,
+                  raw_rdata,
+                  wen,
+                  setIdx,
+                  wdata,
+                  waymask)
 
   // bypass for dual-port SRAMs
   require(!bypassWrite || bypassWrite && !singlePort)
@@ -156,8 +242,6 @@ class SRAMTemplate[T <: Data]
   val rdata = (
     if(clk_div_by_2){
       DelayTwoCycle(mem_rdata, realRen)
-    } else if (holdRead) {
-      HoldUnless(mem_rdata, RegNext(realRen))
     } else {
       mem_rdata
     }).map(_.asTypeOf(gen))
